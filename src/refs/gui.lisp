#!/usr/local/bin/clisp

(load "solver")
(load "ltk/ltk")

(defpackage :gui
(:use :common-lisp :ltk)
(:export #:gui))



(defun path-row-color (path)
  (caar path))

(defun path-row-cells (path)
  (cadar path))

(defun path-row-cells-from-color (path color)
  (cond ((null path) nil)
        ((equal (path-row-color path) color) (path-row-cells path))
        (t (path-row-cells-from-color (cdr path) color))))

(defun is-in-path (path c)
  (cond ((null path) nil)
        ((is-in (path-row-cells path) c) (path-row-color path))
        (t (is-in-path (cdr path) c))))
; (is-in-path '((1 ((2 2) (3 3) (5 6))) (2 ((6 2) (4 5)))) '(6 2)) ; -> 2

(defun downgrade (row cell &optional (acc nil))
  (cond ((null row) (append acc (list cell)))
        ((equal (car row) cell) (append acc (list cell)))
        (t (downgrade (cdr row) cell (append acc (list (car row)))))))
; (downgrade '((1 2) (2 5) (3 1)) '(1 2)) ; -> ((1 2))
; (downgrade nil '(1 2)) ; -> ((1 2))

(defun downgrade-minus-1 (row cell &optional (acc nil))
  (cond ((null row) acc)
        ((equal (car row) cell) acc)
        (t (downgrade-minus-1 (cdr row) cell (append acc (list (car row)))))))

(defun add-to-path (path color c &optional (acc nil))
  (cond ((null path) (append acc (list (list color (list c)))))
        ((equal (path-row-color path) color) (append acc (list (list color (downgrade (path-row-cells path) c))) (cdr path)))
        (t (add-to-path (cdr path) color c (append acc (list (car path)))))))
; (add-to-path '((1 ((2 2) (3 3) (5 6))) (2 ((6 2) (4 5)))) 2 '(6 2)) ; -> ((1 ((2 2) (3 3) (5 6))) (2 ((6 2))))

(defun add-to-ltkpath (ltkpath draw color &optional (acc nil))
  (cond ((null ltkpath) (append acc (list (list color (list draw)))))
        ((equal (path-row-color ltkpath) color) (append acc (list (list color (list draw))) (cdr ltkpath)))
        (t (add-to-ltkpath (cdr ltkpath) draw color (append acc (list (car ltkpath)))))))

(defun add-to-path-partial-erase (path color c &optional (acc nil))
  (cond ((null path) (append acc (list (list color (list c)))))
        ((equal (path-row-color path) color) (append acc (list (list color (downgrade-minus-1 (path-row-cells path) c))) (cdr path)))
        (t (add-to-path-partial-erase (cdr path) color c (append acc (list (car path)))))))
(add-to-path (add-to-path-partial-erase '((1 ((1 0))) (3 ((1 1) (2 1))) (2 ((0 3) (1 3) (1 2) (2 2) (3 2) (3 1)))) 2 '(2 2)) 3 '(2 2)) ; -> ((1 ((2 2) (3 3) (5 6))) (2 ((6 2))))

(defun add-to-path-erase (path color c &optional (acc nil))
  (cond ((null path) (append acc (list (list color (list c)))))
        ((equal (path-row-color path) color) (append acc (list (list color (list c))) (cdr path)))
        (t (add-to-path-erase (cdr path) color c (append acc (list (car path)))))))
; (add-to-path-erase '((1 ((2 2) (3 3) (5 6))) (2 ((6 2) (4 5)))) 2 '(6 2)) ; -> ((1 ((2 2) (3 3) (5 6))) (2 ((6 2))))

(defun get-cell (evt factor)
  (list (floor (ltk::event-x evt) factor) (floor (ltk::event-y evt) factor)))

(defun move-is-valid (path cell-color cell)
  (let ((pcell (car (last (path-row-cells-from-color path cell-color)))))
    (cond ((equal cell pcell) nil)
          ((equal (car cell) (car pcell)) (cond ((or (equal (cadr cell) (1- (cadr pcell))) (equal (cadr cell) (1+ (cadr pcell)))) t)
                                                (t nil)))
          ((equal (cadr cell) (cadr pcell)) (cond ((or (equal (car cell) (1- (car pcell))) (equal (car cell) (1+ (car pcell)))) t)
                                                (t nil)))
          (t nil))))

(defun draw-line (canvas color positions)
  (let ((line (ltk::create-line canvas positions)))
    (ltk::itemconfigure canvas line "fill" color)
    (ltk::itemconfigure canvas line "width" 20)
    line))

(defun linearize (l &optional (acc nil))
  (cond ((null l) acc)
        (t (linearize (cdr l) (append acc (list (caar l) (cadar l)))))))
(linearize '((1 2) (3 5) (5 6)))

(defun redraw-path (canvas ltkpath path color factor colors)
  (let ((old (car (path-row-cells-from-color ltkpath color))))
    (ltk::itemconfigure canvas old "state" :hidden)
    (if (>= (length (path-row-cells-from-color path color)) 2)
        (draw-line canvas (nth color colors) (mapcar (lambda (e) (+ (* e factor) (/ factor 2))) (linearize (path-row-cells-from-color path color)))))))

(defun erase-paths (canvas ltkpath)
  (cond ((null ltkpath) nil)
        (t (progn (ltk::itemconfigure canvas (caadar ltkpath) "state" :hidden)
                  (erase-paths canvas (cdr ltkpath))))))

(defun bindings (canvas map factor size colors bclear bcheck)
  (let* ((down nil)
         (last-cell nil)
         (path nil)
         (ltkpath nil)
         (last-color nil)
         (last-was-primary nil))
    (ltk::bind bclear "<ButtonRelease-1>" (lambda (evt)
                                            (erase-paths canvas ltkpath)
                                            (setf ltkpath nil)
                                            (setf path nil)))
    (ltk::bind bcheck "<ButtonRelease-1>" (lambda (evt) (format t "Checking")))
    (ltk::bind canvas "<ButtonPress-1>"
               (lambda (evt)
                 (setf down t)
                 (let ((cell (get-cell evt factor)))
                   (cond ((is-primary map (position-to-id cell size))
                          (let ((color (position-to-color map (position-to-id cell size))))
                            (setf path (add-to-path-erase path color cell))
                            (setf last-cell cell)
                            (setf last-color color)
                            (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path last-color factor colors) color))))
                         ((is-in-path path cell)
                          (let ((color (is-in-path path cell)))
                            (setf path (add-to-path path color cell))
                            (setf last-color color)
                            (setf last-cell cell)
                            (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path last-color factor colors) last-color))))))
                 (print path)))
    (ltk::bind canvas "<ButtonRelease-1>" (lambda (evt)
                                            (declare (ignore evt))
                                            (setf down nil)
                                            (setf last-cell nil)
                                            (setf last-color nil)))
    (ltk::bind canvas "<Motion>"
               (lambda (evt)
                 (when down
                   (let ((cell (get-cell evt factor)))
                     (if (move-is-valid path last-color cell)
                         (if (is-in-path path cell)
                             (let ((color (is-in-path path cell)))
                               (if (equal color last-color)
                                   (progn (setf path (add-to-path path color cell))
                                          (setf last-cell cell)
                                          (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path last-color factor colors) last-color)))
                                   (progn (setf path (add-to-path-partial-erase path color cell))
                                          (setf path (add-to-path path last-color cell))
                                          (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path color factor colors) color))
                                          (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path last-color factor colors) last-color))
                                          (setf last-cell cell))))
                             (if (is-primary map (position-to-id cell size))
                                 (let ((color (position-to-color map (position-to-id cell size))))
                                   (if (equal color last-color)
                                       (progn (setf path (add-to-path path color cell))
                                              (setf last-cell nil)
                                              (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path last-color factor colors) last-color)))))
                                 (progn (setf path (add-to-path path last-color cell))
                                        (setf last-cell cell)
                                        (setf ltkpath (add-to-ltkpath ltkpath (redraw-path canvas ltkpath path last-color factor colors) last-color))))))))))))

(defun draw-rectangle (canvas x y factor)
  (let* ((rectangle (ltk::create-rectangle canvas (* x factor) (* y factor) (* (1+ x) factor) (* (1+ y) factor))))
    (ltk::itemconfigure canvas rectangle "outline" :white)
    (ltk::itemconfigure canvas rectangle "fill" "")))

(defun draw-grid (canvas size factor)
  (loop for i from 0 to (car size) do
        (loop for j from 0 to (cadr size) do
              (draw-rectangle canvas i j factor))))

(defun draw-primary (canvas map size factor colors)
  (cond ((null map) nil)
        ((row-primary map) (progn (draw-circle canvas (id-to-position (row-id map) size) 50 10 (nth (row-color map) colors) factor)
                                  (draw-primary canvas (cdr map) size factor colors)))
        (t (draw-primary canvas (cdr map) size factor colors))))

(defun draw-circle (canvas position radius padding color factor)
  (let* ((x (car position))
         (y (cadr position))
         (oval (ltk::create-oval canvas (+ (* x factor) (/ padding 2)) (+ (* y factor ) (/ padding 2)) (+ (* x factor) (- radius (/ padding 2))) (+ (* y factor) (- radius (/ padding 2))))))
    (ltk::itemconfigure canvas oval "fill" color)
    (ltk::itemconfigure canvas oval "outline" "")))

(defun gui (map size)
  (setf ltk::*wish-args* '("-name" "Flow Game"))
  (ltk::with-ltk ()
                 (let* ((factor 50)
                        (width (* (car size) factor))
                        (height (* (cadr size) factor))
                        (colors '(:red :blue :yellow :green :orange :pink))
                        (ic (make-instance 'ltk::canvas :width width :height height :background :grey10))
                        (canvas (ltk::canvas ic))
                        (bclear (make-instance 'ltk::button
                                           :master nil
                                           :text "Clear"))
                        (bcheck (make-instance 'ltk::button
                                           :master nil
                                           :text "Check")))
                   (draw-grid canvas size factor)
                   (draw-primary canvas map size factor colors)
                   (ltk::pack canvas :fill :both)
                   (ltk::pack bclear :side :left)
                   (ltk::pack bcheck :side :right)
                   (bindings canvas map factor size colors bclear bcheck))))

(defparameter *size* (car (read-map "maps/map.txt")))
(defparameter *map* (make-grid (cdr (read-map "maps/map.txt"))))
(print (solve *map* *size*))
(gui *map* *size*)